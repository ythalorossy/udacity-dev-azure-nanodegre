export AZURE_SUBSCRIPTION=Pay-As-You-Go
export LOCATION=northeurope
export RESOURCE_GROUP=yross-resource-group
export STORAGE_ACCOUNT=yross01
export PLAN=yross-plan

export APP_NAME=yross-app
export OS_TYPE=Linux
export RUNTIME_PYTHON=python

export COSMOSDB_ACCOUNT=yross-cosmosdb
export MONGODB=yross_mongodb
export MONGODB_SERVER_VERSION='4.0'
export MONGODB_COLLECTION=yross-collection
export MONGODB_ADVERTISEMENTS_COLLECTION=advertisements
export MONGODB_POSTS_COLLECTION=posts


az login

----------------------------
# Create resource group
az group create \
  --name $RESOURCE_GROUP \
  --location $LOCATION

----------------------------
# Create Function APP
Python requires Linux OS

az functionapp create \
  --functions-version 2 \
  --resource-group $RESOURCE_GROUP \
  --name $APP_NAME \
  --storage-account $STORAGE_ACCOUNT \
  --os-type  $OS_TYPE\
  --consumption-plan-location $LOCATION \
  --runtime $RUNTIME_PYTHON

------------------
# CosmoDB Account

az cosmosdb create \
  --name $COSMOSDB_ACCOUNT \
  --resource-group $RESOURCE_GROUP \
  --subscription $AZURE_SUBSCRIPTION \
  --locations regionName=$LOCATION failoverPriority=0 isZoneRedundant=False

az cosmosdb create \
  --name $COSMOSDB_ACCOUNT \
  --resource-group $RESOURCE_GROUP \
  --kind MongoDB \
  --server-version $MONGODB_SERVER_VERSION \
  --subscription $AZURE_SUBSCRIPTION 


# Get your CosmosDB key and save as a variable
export COSMOSDB_KEY=$(az cosmosdb keys list --name $COSMOSDB_ACCOUNT --resource-group $RESOURCE_GROUP --output tsv |awk '{print $1}')

az cosmosdb sql database create \
    --account-name $COSMOSDB_ACCOUNT \
    --name $MONGODB \
    --key $COSMOSDB_KEY \
    --resource-group $RESOURCE_GROUP

# Create a container with a partition key and provision 400 RU/s throughput.
az cosmosdb mongodb collection create \
    --db-name $MONGODB \
    --collection-name $MONGODB_COLLECTION \
    --resource-group $RESOURCE_GROUP \
    --name $COSMOSDB_ACCOUNT \
    --partition-key-path /name \
    --throughput 400


# Create collections

printf ' 
[ 
  {
      "key": {"keys": ["_id"]}
  }
]' > idxpolicy-yross.json


az cosmosdb mongodb collection create \
  -a $COSMOSDB_ACCOUNT \
  -g $RESOURCE_GROUP \
  -d $MONGODB \
  -n $MONGODB_COLLECTION \
  --shard 'id' \
  --throughput 400 \
  --idx @idxpolicy-yross.json





-----------
# Import dataset into MongoDB

mongo \
  --host yross01.mongo.cosmos.azure.com \
  --port 10255 --username yross01 \
  --password 8LirF4a7riXqxdwUFrEhrKOlU5WLbznhqU7z71Q5jyyx35DwEFx31adV98NZ3LCi3PTEA5ew6LP1eWlrqSg6iw== 

mongo \
  --host yross01.mongo.cosmos.azure.com \
  --port 10255 --username yross01 \
  --password 8LirF4a7riXqxdwUFrEhrKOlU5WLbznhqU7z71Q5jyyx35DwEFx31adV98NZ3LCi3PTEA5ew6LP1eWlrqSg6iw== \
  --ssl


mongoimport \
  --host yross01.mongo.cosmos.azure.com \
  --port 10255 \
  --username yross01 \
  --password 8LirF4a7riXqxdwUFrEhrKOlU5WLbznhqU7z71Q5jyyx35DwEFx31adV98NZ3LCi3PTEA5ew6LP1eWlrqSg6iw== \
  --jsonArray \
  --file ./sample_data/sampleAds.json \
  --db yross_mongodb \
  --collection advertisements \
  --ssl

mongoimport \
  --host yross01.mongo.cosmos.azure.com \
  --port 10255 \
  --username yross01 \
  --password 8LirF4a7riXqxdwUFrEhrKOlU5WLbznhqU7z71Q5jyyx35DwEFx31adV98NZ3LCi3PTEA5ew6LP1eWlrqSg6iw== \
  --jsonArray \
  --file ./sample_data/samplePosts.json \
  --db yross_mongodb \
  --collection posts \
  --ssl


-----------------
# Deploy the frontend app

python3 -m venv venv
source /venv/bin/activate
pip install -r requirements.txt

export FLASK_RUN=app.py
export FLASK_ENV=development
flask run



----------------
----------------

Full steps

Follow the steps below:

Define names for storage account and functionapp. These names must be unique. Note: Use your own unique names below.

storageName=funcappcosmodbsa
functionAppName='azfuncwithcosmosdb'
region=westus2
resourceGroup=funcappcosmosdbrg
databaseName='myfirstdatabase'
collectionName='myfirstcollection'
serverVersion='4.0'

Create a resource group. We want the functionapp and cosmosdb to be in the same resource group.

az group create \
  --name $resourceGroup \
  --location $region

Create a storage account

az storage account create \
  --name $storageName \
  --location $region \
  --resource-group $resourceGroup \
  --sku Standard_LRS

Create a function app (serverless) in the resource group created above
  az functionapp create \
  --name $functionAppName \
  --resource-group $resourceGroup \
  --storage-account $storageName \
  --consumption-plan-location $region \
  --functions-version 3

Create an Azure Cosmos DB database using the same function app name that you used above
az cosmosdb create \
  --name $functionAppName \
  --resource-group $resourceGroup \
  --default-consistency-level Eventual \
  --locations regionName='West US 2' failoverPriority=0 isZoneRedundant=False \
  --locations regionName='East US 2' failoverPriority=1 isZoneRedundant=False

Create a SQL API Database
az cosmosdb sql database create \
  -a $functionAppName \
  -g $resourceGroup \
  -d $databaseName \
  -n $collectionName \

Now we need to establish a connection between Azure Cosmo DB and the functionapp. To that end, get the Azure Cosmo DB connection string and key

endpoint=$(az cosmosdb show \
  --name $functionAppName \
  --resource-group $resourceGroup \
  --query documentEndpoint \
  --output csv)

key=$(az cosmosdb list-keys \
  --name $functionAppName \
  --resource-group $resourceGroup \
  --query primaryMasterKey \
  --output csv)

Finally, configure FunctionApp to use the Azure Cosmo DB connection string obtained in the above step

az functionapp config appsettings set \
  --name $functionAppName \
  --resource-group $resourceGroup \
  --setting CosmosDB_Endpoint=$endpoint CosmosDB_Key=$key

